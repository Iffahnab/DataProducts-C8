required_columns <- as.numeric(new_data[, outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
}
best <- function(state, outcome) {
## Read outcome data
##outcome_name: "heart attack", "heart failure", "pneumonia"
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
best <- function(state, outcome){
## Read the outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# check that state and outcome are valid
state <- data[, 7]
outcome <- data(c("heart attack", "heart failure", "pneumonia"))
if ((state %in% states) == FALSE){
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE){
stop(print("invalid outcome")
}
# Return hospital name in that state with lowest 30-day death rate
if (outcome == "heart attack") {
outcome_col <- 11 }
else if (outcome == "heart failure"){
outcome_col <- 17 }
else (outcome == "pneumonia"){
outcome_col <- 25 }
# subset of the data with the desired state
new_data <- subset(data, State == state)
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[, outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
}
best <- function(state, outcome) {
## Read outcome data
##outcome_name: "heart attack", "heart failure", "pneumonia"
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
best ("TX", "heart attack")
source('~/best.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
source("submitscript3.R")
submit()
submit()
submit()
?length
best <- function(state, outcome) {
## Read outcome data
##outcome_name: "heart attack", "heart failure", "pneumonia"
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
if (is.numeric(num) == TRUE) {
if (length(data[,2]) < num) {
return(NA)
}
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#if nume is either "best" or "worst", then interpret it to the
#corresponding numerical value
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}
else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
#return the hospital name with the outcome ranking of num
ordered_desired_data[num, 2]
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#if num is greater that the number of hospitals in the desired state,
# return NA
if (is.numeric(num) == TRUE) {
if (length(data[,2]) < num) {
return(NA)
}
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#if nume is either "best" or "worst", then interpret it to the
#corresponding numerical value
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}
else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
#return the hospital name with the outcome ranking of num
ordered_desired_data[num, 2]
}
end
}
submit()
submit()
submit()
submit()
rankall <- function(outcome, num = "best") {
## Read outcome data
##
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
submit()
source('~/rankall.R')
submit()
source('~/rankall.R')
head(rankall)
submit()
submit()
? length
rankall <- function(outcome, num = "best") {
## Read outcome data
##
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
head(rankall)
tail (rankall("heart faiure", 10))
set.seed(1)
rpois(5, 2)
exit
download.file("http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx", destfile=("./data/passengers.xlsx"))
download.file("http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx", destfile=("./data/passengers.xlsx"). mode = "wb")
download.file("http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx", destfile=("./data/passengers.xlsx"), mode = "wb")
download.file("http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx", destfile=("./data/passengers.xlsx"), mode = "wb")
download.file("http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx", destfile=("./passengers.xlsx"), mode = "wb")
getwd()
download.file("http://real-chart.finance.yahoo.com/table.csv?s=GMALF&d=6&e=8&f=2015&g=d&a=5&b=18&c=2013&ignore=.csv, destfile=("./genting.csv")
download.file("http://real-chart.finance.yahoo.com/table.csv?s=GMALF&d=6&e=8&f=2015&g=d&a=5&b=18&c=2013&ignore=.csv", destfile=("./genting.csv")
download.file("http://real-chart.finance.yahoo.com/table.csv?s=GMALF&d=6&e=8&f=2015&g=d&a=5&b=18&c=2013&ignore=.csv", destfile=("./genting.csv")
fileurl <- "http://real-chart. finance.yahoo.com/q/hp?s=GMALF&a=05&b=18&c=2013&d=06&e=11&f=2015&g=d&ignore=.csv"
download.file(fileurl, edstfile = ("./genting.csv"))
download.file(fileurl, destfile = ("./genting.csv"))
mean(genting.csv)
read.csv("genting.csv")
filegov <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file("filegov, destfile = (./gov.xlsx", mode = "wb")
download.file(filegov, destfile = "./gov.xlsx", mode = "wb")
library(rJava)
install.packages("rJava")
library(rJava)
Sys.info()[5]
R.Version()$arch
system("java -version")
download.file(filegov, destfile = "./gov.xlsx", mode = "wb")
colIndex <- 14:21
rowIndex <- 74:79
xlsdat <- read.xlsx("./gov.xlxs", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
xlsdat <- read.xlsx("./gov.xlsx", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
library(data.table)
install.packages(data.table)
xlsdat <- read.xlsx("./gov.xlsx", mode= "wb", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
xlsdat <- read.xlsx("./gov.xlsx", mode = "wb", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
library(rJava)
read.xlsx
library(xlsx)
install.packages("xlsx")
library(xlsx)
read.xlsx
xlsdat <- read.xlsx("./gov.xlsx", mode = "wb", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = ("./quiz1"))
Q1data <- read.csv("quiz1", header = TRUE)
names(Q1data)
table(Q1data$VAL)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf", destfile = "./quiz1pdf")
x <- read.pdf("quiz1pdf")
table(Q1data_h$FES)
table(Q1data$FES)
summary(Q1data&$FES)
summary(Q1data$FES)
Q1data$FES[1:5]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = Quiz2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "./Quiz2")
rows <- 18:23
columns <- 7:15
dat <- read.xlsx("./Quiz2, mode = "wb", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
dat <- read.xlsx("./Quiz2.xlsx, mode = "wb", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
dat <- read.xlsx("./Quiz2.xlsx, sheetIndex=1, header=TRUE, rows=rows, columns=columns)
dat <- read.xlsx("./Quiz2.xlsx, sheetIndex=1, header=TRUE, rows=rows, columns=columns)
dat <- read.xlsx("./Quiz2.xlsx", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
install.packages(xlsx)
library(xlsx)
library(rJava)
install.packages("xlsx")
install.packages("xlsx")
dat <- read.xlsx("./Quiz2.xlsx", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
dat <- read.xlsx("./Quiz2.xlsx", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
install.packages("xlsx")
dat <- read.xlsx("./Quiz2.xlsx", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
dat <- read.xlsx("./Quiz2.xlsx", mode = "wb", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
library(xlsx)
library(rJava)
library(xlsxjars)
dat <- read.xlsx("./Quiz2.xlsx", mode = "wb", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx ", destfile = "./Q3.xlsx", mode = "wb")
dat <- read.xlsx("./Q3.xlsx", mode = "wb", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
rows <- 18:23
columns <- 7:15
dat <- read.xlsx("./Q3.xlsx", mode = "wb", sheetIndex=1, header=TRUE, rows=rows, columns=columns)
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("./Q3.xlsx", mode = "wb", sheetIndex=1, header=TRUE, rowIndex=rowIndex, colIndex=colIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
install.packages("XML")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile = "./Q4.xml")
xmlfile <- xmlTreeParse(Q4.xml)
library(XML)
xmlfile <- xmlTreeParse(Q4.xml)
file <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
my.doc <- xmlTreeParse(file=file,useInternal=TRUE)
root.Node <- xm1Root(my.doc)
root.Node <- xmlRoot(my.doc)
xmlName(root.Node)
zipcode <- xpathSApply(root.Node, "//zipcode", xmlValue)
length(zipcode[zipcode==21231])
getwd()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
getwd(0)
getwd()
submit()
submit()
pnom(70, mean=80, sd=10, lower.tail=FALSE)
pnorm(70, mean=80, sd=10, lower.tail=FALSE)
qnorm(70, mean = 80, sd = 10)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 100, sd = 75)
qnorm(0.95, mean = 100, sd = 75/sqrt(100))
qnorm(0.95, mean = 1100, sd = 75/sqrt(100))
10/sqrt(100)
pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1)
pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1)
ppois(10, lambda = 5*3)
pnorm(70, mean = 80, sd = 10)
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
install.packages("knitr")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x,w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x^2)
data("mtcars")
View(df)
View(xlsdat)
View(df)
View(pollutantmean)
data("mtcars")
view("mtcars")
View(mtcars)
view(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
beta1 <- cor(y, x) * sd(y)/sd(x)
beta0 <- mean(y) - beta1 * mean(x)
beta1
0.4*1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x -mean(x))/ sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta0 <- mean(y) - beta1 * mean(x)
beta0
coef(lm(y~ x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
fit(lm (y~x))
fit <-(lm (y~x))
e <- resid(fit)
e
yhat <- predict(fit)
yhat
summary(fit)
data(mtcars)
y <- mtcars$wt
x <- mtcars$mpg
fit <- lm(x~y)
yhat <- predict (fit)
fit
yhat
help(mtcars)
predict(fit, newdata = data.frame(x = 3), interval = ("prediction")
)
predict(fit, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
fit_car2 <- lm(x ~ I(y/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
sum(resid(fit)^2)/sum((y - mean(y))^2)
data(mtcars)
car1 <- lm(mpg ~ am , data = mtcars)
car1
summary(car1)$coeff
mtcars2 <- mtcars
mtcars2$am <- factor(mtcars$am, labels = c("Automatic", "Manual"))
summary(lm(mpg ~ am -1, data = mtcars2 ))$coeff
summary(model1)
summary(model2)
summary(car1)
require(datasets);data("mtcars"); ; require(ggplot2)
require(datasets);data("mtcars"); require(ggplot2)
library(ggplot2)
require(datasets);data("mtcars"); require(ggplot2)
g = ggpairs(mtcars, lower = list(continous = "smooth"), params = c(method = "loess"))
summary(lm(mpg ~ . , data = mtcars))$coeff
data(mtcars);par(mfrow = c(2,2))
fit <- lm(mpg ~ . , data = mtcars); plot(fit)
install.packages("gridExtra")
x <- c(0.586, 0.166, -0.042, -0.614, x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
end
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
hatvalues(fit)
dfbeta(fit)
dfbetas(fit)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages('caret')
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModelling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModelling')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling", repos="http://R-Forge.R-project.org")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages('AplliedPredictiveModeling')
setwd("~/Data Science/DataProducts C8")
library(shiny)
runApp()
